networks:
  pulsar:
    driver: bridge
  sidecar:
    driver: bridge
services:
# Start zookeeper
  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

# Init cluster metadata
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    networks:
      - pulsar
    command: bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://broker:8080 --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

# Start bookie
  bookie:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
  # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf
      && exec bin/pulsar bookie"

# Start broker
  broker:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      #Si se realiza una ejecución manual del microservicio desde el IDE, se debe usar esta línea:
      - advertisedListeners=external:pulsar://127.0.0.1:6650
      #Si se realiza una ejecución completa de todo (incluido el microservicio) con docker compose, se debería usar esta línea en lugar de la anterior para que se comunique con el contenedor broker dentro de una misma ejecución
      # - advertisedListeners=external:pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf
      &&  exec bin/pulsar broker"
  
  # Servicios de Alpes Partners
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: partner
      POSTGRES_PASSWORD: partner
      POSTGRES_DB: alpespartner
    ports: ["5432:5432"]
    volumes: ["pgdata:/var/lib/postgresql/data"]
    profiles: ["alpespartner", "bd"]
  alpespartner:
    container_name: alpespartner
    hostname: alpespartner
    image: alpespartner/flask 
    profiles: ["alpespartner", "monolito"]
    networks:
      - sidecar
      - pulsar
    labels:
      SidecarDiscover: "false"
    depends_on:
      - broker
      - postgres
    environment:
      - ALPESPARTNERS_ADDRESS=alpespartner
      - PULSAR_ADDRESS=broker
      - DB_URL=postgresql+psycopg2://app:app@postgres:5432/alpespartner
    ports:
      - "5000:5000"
  
  
  
