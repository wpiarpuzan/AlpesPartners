networks:
  pulsar:
    driver: bridge
  sidecar:
    driver: bridge

services:
  # Start zookeeper
  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Init cluster metadata
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    networks:
      - pulsar
    command: bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://broker:8080 --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

  # Start bookie
  bookie:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf
      && exec bin/pulsar bookie"

  # Start broker
  broker:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      # Si se ejecuta desde IDE, usar esta lÃ­nea:
      - advertisedListeners=external:pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf
      &&  exec bin/pulsar broker"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metrics"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Servicios de Alpes Partners
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: partner
      POSTGRES_PASSWORD: partner
      POSTGRES_DB: alpespartner
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    profiles: ["alpespartner", "bd"]
    networks:
      - sidecar
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U partner"]
      interval: 5s
      timeout: 5s
      retries: 10

  alpespartner:
    container_name: alpespartner
    hostname: alpespartner
    build:
      context: .
      dockerfile: alpespartners.Dockerfile
    image: alpespartners/flask:local
    profiles: ["alpespartner", "monolito"]
    networks: [sidecar, pulsar]
    labels:
      SidecarDiscover: "false"
    depends_on:
      broker:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure
    environment:
    - ALPESPARTNERS_ADDRESS=alpespartner
    - PULSAR_ADDRESS=broker
    - BROKER_HOST=broker
    - DB_URL=postgresql+psycopg2://partner:partner@postgres:5432/alpespartner
    - DATABASE_URL=postgresql+psycopg2://partner:partner@postgres:5432/alpespartner
    - PULSAR_BROKER_URL=pulsar://broker:6650
    - TOPIC_COMANDOS_CAMPANIAS=persistent://public/default/comandos.campanias
    - TOPIC_EVENTOS_CAMPANIAS=persistent://public/default/eventos.campanias
    - PYTHONPATH=/src        # ðŸ‘ˆ clave: /src, no "/"
    - PYTHONDONTWRITEBYTECODE=1
    - PYTHONUNBUFFERED=1
    ports:
      - "5000:5000"
    command: flask --app alpespartners.api:create_app run --host=0.0.0.0 --no-reload
    # Si prefieres Gunicorn (mÃ¡s estable), cambia 'command' por:
    # command: >
    #   gunicorn "alpespartners.api:create_app()"
    #   -b 0.0.0.0:5000 --workers 2 --threads 4 --timeout 0 --log-level info



volumes:
  pgdata: